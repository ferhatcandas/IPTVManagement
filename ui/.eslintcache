[{"C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\index.js":"1","C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\App.js":"2","C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\components\\Header.js":"3","C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\components\\Content.js":"4","C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\components\\Footer.js":"5","C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\components\\Sidebar.js":"6","C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\components\\Channel\\ChannelList.js":"7","C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\components\\Channel\\ChannelModal.js":"8","C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\services\\channelService.js":"9","C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\reducers\\mReducer.jsx":"10","C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\components\\Integration\\IntegrationList.js":"11","C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\components\\Channel\\WatchModal.js":"12"},{"size":363,"mtime":1609186465886,"results":"13","hashOfConfig":"14"},{"size":466,"mtime":1609180006906,"results":"15","hashOfConfig":"14"},{"size":7049,"mtime":1609179833973,"results":"16","hashOfConfig":"14"},{"size":2491,"mtime":1609180269385,"results":"17","hashOfConfig":"14"},{"size":452,"mtime":1609179832255,"results":"18","hashOfConfig":"14"},{"size":42895,"mtime":1609179918315,"results":"19","hashOfConfig":"14"},{"size":7573,"mtime":1609193209815,"results":"20","hashOfConfig":"14"},{"size":7800,"mtime":1609184898070,"results":"21","hashOfConfig":"14"},{"size":1226,"mtime":1609011057820,"results":"22","hashOfConfig":"14"},{"size":229,"mtime":1609180017576,"results":"23","hashOfConfig":"14"},{"size":214,"mtime":1609186496866,"results":"24","hashOfConfig":"14"},{"size":1080,"mtime":1609193162537,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"evj7d9",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},"C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\index.js",[],["54","55"],"C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\App.js",[],"C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\components\\Header.js",[],"C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\components\\Content.js",[],"C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\components\\Footer.js",[],"C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\components\\Sidebar.js",["56"],"C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\components\\Channel\\ChannelList.js",["57"],"import React from 'react';\r\nimport ChannelModal from \"./ChannelModal\";\r\nimport ChannelService from \"../../services/channelService\";\r\nimport WatchModal from './WatchModal';\r\n\r\nexport default class ChannelList extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            channels: [],\r\n            filtered: [],\r\n            selectedChannelId: \"\",\r\n            filterText: \"\",\r\n            watchUrl: \"\"\r\n        }\r\n        this.channelApi = new ChannelService();\r\n        this.fetchRows = this.fetchRows.bind(this)\r\n        this.removeChannel = this.removeChannel.bind(this);\r\n        this.editChannel = this.editChannel.bind(this);\r\n        this.changeStatus = this.changeStatus.bind(this);\r\n        this.newChannelModal = this.newChannelModal.bind(this);\r\n        this.watch = this.watch.bind(this);\r\n        this.handler = this.handler.bind(this);\r\n    }\r\n    watch(streamUrl) {\r\n        this.setState({ watchUrl: streamUrl })\r\n    }\r\n    removeChannel(channelId) {\r\n        this.channelApi.delete(channelId, () => {\r\n            this.fetchRows();\r\n        })\r\n    }\r\n    changeStatus(channelId) {\r\n        if (channelId)\r\n            this.channelApi.putStatus(channelId, () => {\r\n                this.fetchRows();\r\n            })\r\n    }\r\n    editChannel(channelId) {\r\n        this.setState({ selectedChannelId: channelId })\r\n    }\r\n    newChannelModal() {\r\n        this.setState({ selectedChannelId: null })\r\n    }\r\n    GenerateRow = (props) => {\r\n        const row = (\r\n            <tr key={props.id} style={{ display: props.show }}>\r\n                <td>{props.channelName}</td>\r\n                <td>\r\n                    <div className=\"icheck-primary d-inline\">\r\n                        <input type=\"radio\" id={\"isActive_\" + props.id} onClick={this.changeStatus.bind(this, props.id)} disabled={!props.editable} onChange={this.changeStatus.bind(this, null)} checked={props.isActive}></input>\r\n                        <label htmlFor={\"isActive_\" + props.id}></label>\r\n                    </div>\r\n                </td>\r\n                <td><img src={props.logo} width={40} height={40} alt=\"\" /></td>\r\n                <td>{props.language}</td>\r\n                <td>{props.category}</td>\r\n                <td>{props.country}</td>\r\n                <td>\r\n                    <div className=\"icheck-primary d-inline\">\r\n                        <input type=\"radio\" id={\"isFound_\" + props.id} disabled={!props.isFound} defaultChecked={props.isFound}></input>\r\n                        <label htmlFor={\"isFound_\" + props.id}></label>\r\n                    </div>\r\n                </td>\r\n\r\n                <td><button type=\"button\" onClick={this.watch.bind(this, props.streamUrl)} data-toggle=\"modal\" data-target=\"#modal-watch\" className=\"btn btn-warning\"><i className=\"fas fa-tv\"></i></button></td>\r\n                <td>{props.editable ? <button type=\"button\" onClick={this.editChannel.bind(this, props.id)} data-toggle=\"modal\" data-target=\"#modal-primary\" className=\"btn btn-warning\"><i className=\"fas fa-pen-square\"></i></button> : null}</td>\r\n                <td>{props.editable ? <button type=\"button\" onClick={this.removeChannel.bind(this, props.id)} className=\"btn btn-danger\"><i className=\"fas fa-eraser\"></i></button> : null}</td>\r\n            </tr>\r\n        )\r\n        return row;\r\n    };\r\n\r\n    GetTable() {\r\n        var rows = [];\r\n        for (let index = 0; index < this.state.filtered.length; index++) {\r\n            const element = this.GenerateRow(this.state.filtered[index]);\r\n            rows.push(element);\r\n        }\r\n        return rows\r\n    }\r\n    filterRows = (event) => {\r\n        if (event.target.value) {\r\n            let value = event.target.value.toLowerCase();\r\n            this.filterFunction(value);\r\n        }\r\n        else {\r\n            this.setState({ filtered: this.state.channels, filterText: \"\" })\r\n        }\r\n    }\r\n    filterFunction = (value) => {\r\n        let filter = this.state.channels.map((data, index) => {\r\n            if (data.channelName?.toLowerCase().includes(value) ||\r\n                data.language?.toLowerCase().includes(value) ||\r\n                data.category?.toLowerCase().includes(value) ||\r\n                data.country?.toLowerCase().includes(value) ||\r\n                data.streamUrl?.toLowerCase().includes(value)) {\r\n                data.show = 'table-row'\r\n            }\r\n            else {\r\n                data.show = 'none'\r\n            }\r\n            return data;\r\n        })\r\n        this.setState({ filtered: filter, filterText: value })\r\n    }\r\n    fetchRows() {\r\n        this.channelApi.getAll((data) => {\r\n            this.setState({ channels: data, selectedChannelId: '' }, () => {\r\n                this.filterFunction(this.state.filterText)\r\n            })\r\n        })\r\n\r\n    }\r\n    handler() {\r\n        if (this.state.watchUrl != \"\")\r\n            this.setState({ watchUrl: \"\" })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchRows();\r\n    }\r\n    resultTable() {\r\n        const element = (\r\n            <table className=\"table table-hover text-nowrap\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Channel Name</th>\r\n                        <th>Is Active</th>\r\n                        <th>Logo</th>\r\n                        <th>Language</th>\r\n                        <th>Category</th>\r\n                        <th>Country</th>\r\n                        <th>Is Found</th>\r\n                        <th>Stream m3u8</th>\r\n                        <th>Edit</th>\r\n                        <th>Remove</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.GetTable()}\r\n                </tbody>\r\n            </table>\r\n        )\r\n        return element;\r\n\r\n\r\n    }\r\n    render() {\r\n        const element = (\r\n            <div className=\"col-12\" style={{ paddingLeft: \"0px\", paddingRight: \"0px\" }} onClick={this.handler.bind(this)}>\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h3 className=\"card-title\">TV Channels</h3>\r\n                        <div className=\"container-fluid\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-8\">\r\n                                    <button type=\"button\" className=\"btn btn-primary float-right\" data-toggle=\"modal\" data-target=\"#modal-primary\" onClick={this.newChannelModal.bind(this)} ><i className=\"fa fa-plus\"></i></button>\r\n                                </div>\r\n                                <div className=\"col-4\">\r\n                                    <div className=\"card-tools\">\r\n                                        <div className=\"input-group input-group-sm\">\r\n                                            <input type=\"text\" name=\"table_search\" className=\"form-control float-right\" onChange={this.filterRows.bind(this)} placeholder=\"Search\" />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card-body table-responsive p-0\">\r\n                        {this.resultTable()}\r\n                    </div>\r\n                </div>\r\n                <ChannelModal channelId={this.state.selectedChannelId} onDone={this.fetchRows} />\r\n                <WatchModal watchUrl={this.state.watchUrl} onClose={this.watch} />\r\n            </div>\r\n        )\r\n        return element\r\n    }\r\n\r\n}","C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\components\\Channel\\ChannelModal.js",[],"C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\services\\channelService.js",[],["58","59"],"C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\reducers\\mReducer.jsx",[],"C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\components\\Integration\\IntegrationList.js",[],"C:\\Users\\Jason\\Desktop\\Projects\\Me\\IPTVManagement\\ui\\src\\components\\Channel\\WatchModal.js",["60"],"import React, { Component } from 'react'\r\nimport ReactHlsPlayer from \"react-hls-player\";\r\n\r\nexport default class WatchModal extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            url: props.watchUrl,\r\n            id: \"modal-watch\"\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.props.watchUrl != this.state.url) {\r\n            console.log(this.props.watchUrl)\r\n            this.setState({ url: this.props.watchUrl })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"modal fade\" id={this.state.id} style={{ display: \"none\" }} aria-modal=\"true\" role=\"dialog\" >\r\n                <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content bg-primary\">\r\n                        <div className=\"modal-body\">\r\n                            <ReactHlsPlayer url={this.state.url} autoPlay={true} controls={true} width=\"100%\" height=\"100%\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n",{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":15,"column":29,"nodeType":"67","endLine":15,"endColumn":124},{"ruleId":"68","severity":1,"message":"69","line":116,"column":33,"nodeType":"70","messageId":"71","endLine":116,"endColumn":35},{"ruleId":"61","replacedBy":"72"},{"ruleId":"63","replacedBy":"73"},{"ruleId":"68","severity":1,"message":"69","line":13,"column":33,"nodeType":"70","messageId":"71","endLine":13,"endColumn":35},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["74"],["75"],"no-global-assign","no-unsafe-negation"]